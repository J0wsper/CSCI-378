import torch
import numpy as np
from torch import nn, optim
from torch.utils.data import Dataset, DataLoader
import pandas as pd

# Number of data points in our set


device = "cpu"
if torch.cuda.is_available():
    device = "cuda"

points = 52077
train_size = int(0.8 * points)


class TempAnomalyDataset(Dataset):
    def __init__(self, file_path, seq_len):
        self.data = pd.read_json(file_path)
        self.data = self.data.to_numpy()
        self.data = torch.tensor(self.data[:, 4])
        self.seq_len = seq_len

    def __len__(self):
        return len(self.data) - self.seq_len - 1

    def __getitem__(self, idx):
        # Out of bound indices
        if idx > len(self.data):
            idx = len(self.data) - 1
        elif idx < self.seq_len:
            idx = self.seq_len
        return self.data[idx - self.seq_len: idx], self.data[
            idx - self.seq_len + 1: idx + 1
        ]


anomaly_dataset = TempAnomalyDataset("data/berkeley/data.json", 256)
train_data, valid_data = torch.utils.data.random_split(
    anomaly_dataset, [train_size, len(anomaly_dataset) - train_size]
)


# We want this network to output log probabilities over possible continuations
# of the sequence if we are going to implement beam search
class TempAnomalyNetwork(nn.Module):
    def __init__(self, layers=[32, 64, 128, 256]):
        super().__init__()
        c = 1
        L = []
        total_dilation = 1
        for l in layers:
            L.append(nn.ConstantPad1d((2 * total_dilation, 0), 0))
            L.append(nn.Conv1d(c, l, 3, dilation=total_dilation, dtype=float))
            L.append(nn.ReLU())
            total_dilation *= 2
            c = l
        self.network = nn.Sequential(*L)
        self.classifier = nn.Softmax(dim=1)

    def forward(self, x):
        x = torch.unsqueeze(x, 1)
        x = self.classifier(self.network(x)).mean(dim=1)
        x = torch.squeeze(x, 1)
        return x


def train(lr=1e-3, reg=1e-3, epochs=10, batch_size=8, weight_decay=0):
    train_loader = DataLoader(train_data, batch_size=batch_size)
    valid_loader = DataLoader(valid_data, batch_size=batch_size)

    model = TempAnomalyNetwork().to(device)
    opt = optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)
    loss_fn = nn.MSELoss()

    for i in range(epochs):
        model.train()
        for batch_xs, batch_ys in train_loader:
            batch_xs = batch_xs.to(device)
            batch_ys = batch_ys.to(device)
            pred = model(batch_xs)
            loss = loss_fn(pred, batch_ys)
            opt.zero_grad()
            loss.backward()
            opt.step()
        model.eval()
        losses = []
        for batch_xs, batch_ys in valid_loader:
            batch_xs = batch_xs.to(device)
            batch_ys = batch_ys.to(device)
            pred = model(batch_xs)
            loss = loss_fn(pred, batch_ys)
            losses.append(loss.item())
        losses = np.array(losses, dtype=float)
        print("Epoch: ", i, "Average validation loss: ", np.mean(losses))

    return model


model = train()
